local w,y,l,n,API,REF,W,S,ycall,G
do--[- Dir -]--
	w,y,l,n,API,REF,W,S,ycall,G={C={},E={}},{Parts='BasePart',GUI='GuiObject'},{ServerOnly=true,Server=true,Deprecated=true}
	,{Member=true,YieldFunction='Yi',Callbacks='Ca',Functions='Fu',Events='Ev',Properties='Pr',EnumItem='En',YieldFunctions='YFu'}
	,(readfile and isfile and isfile'API'and readfile'API')or game:HttpGetAsync'https://raw.githubusercontent.com/MaximumADHD/Roblox-Client-Tracker/roblox/Mini-API-Dump.json'
	,(readfile and isfile and isfile'REF'and readfile'REF')or game:HttpGetAsync'https://raw.githubusercontent.com/MaximumADHD/Roblox-Client-Tracker/roblox/ReflectionMetadata.xml'
	,{NotReplicated=true,CustomLuaState=true,Hidden=true,Yields=true},{PluginSecurity=true,NotAccessibleSecurity=true},function(f)
		local co=coroutine.create(f)
		if(coroutine.resume(co))then
			return true
		else
			return nil
		end
	end,getgenv and getgenv()or _G
	if not isfile'REF'then
		writefile('REF',REF)
	end
	if not isfile'API'then
		writefile('API',API)
	end
	API=game:FindService'HttpService':JSONDecode(API)
end
do--[+ Ref_Parse +]--
	--| w = { C = { Class = { Properties , Functions , ... } } , E = { Enum = { EnumItem } } } | y = ClassCategory | l = Blacklist | n = Content
	for t,c in string.gmatch(REF,'="(%a+)">(.-)[\n<]')do
		if string.byte(c)~=13 then
			if not w._ then--=Class
				w._=c
			elseif w.__ then
				if y[c]then--=ClassCategory
					w.__[y[c]]=true
				elseif t=='PreferredParent'or t=='PreferredParents'then--=PreferredParentList
					w.__.PPr=w.__.PPr or{}
					w.__.PPr[c]=true
				elseif l[t]or l[c]then--+SkippedProp(Deprecated/Server)
					if w.l then
						w.__[w.c][w.l],w.l=nil,nil
					else
						w.__,w.c=nil,nil
					end
				elseif w.c then
					if not w.l then--=newProp
						if w._~='BillboardGui'or(c~='AbsolutePosition'and c~='AbsoluteSize')then--+Bug_Fix
							w.__[w.c][c],w.l={},c
						end
					elseif w.__[w.c][w.l]then
						w.__[w.c][w.l][t]=c
					end
				else
					w.__[t]=c
				end
			end
		else
			local e=n[string.sub(t,19)]
			if e then --=Cont
				if e==true then --=Member=newProp
					w.l=nil
				elseif w.__ then --=newPropCat
					w.c,w.__[e],w.c=true,{},e
				end
			else --=Classes/Enums
				if w._ then
					w[string.sub(t,19,19)][w._],w._,w.__,w.l,w.g,w.c=w.__,nil,{},nil,nil,nil
				end
			end
		end
	end
	w._,w.l,w.__,w.c=nil,nil,nil,nil
end
do--[+ Api_Parse +]--
	--|W = { NeedsTags,... } , S = { SkippedSecurity }
	for _,v in ipairs(API.Classes)do
		if#v.Members~=0 then
			w.C[v.Name]=w.C[v.Name]or{}
			for _,p in ipairs(v.Members)do
				local f=n[p.MemberType..'s']or(p.MemberType=='Property'and n.Properties)
				if f then
					if S[p.Security.Read]or S[p.Security.Write]then --+Skipped(HighProp)
						if w.C[v.Name][f]then
							w.C[v.Name][f][p.Name]=nil
						end
						continue
					end
					local Tags
					if p.Tags then
						for _,t in ipairs(p.Tags)do --+Filtring(DeprecatedTags)
							if W[t]then
								Tags=Tags or{}
								Tags[t]=true
							else
								Tags=nil
								break
							end
						end
						if not Tags then
							if w.C[v.Name][f]then
								w.C[v.Name][f][p.Name]=nil
							end
							continue
						end
					end
					w.C[v.Name][f]=w.C[v.Name][f]or{}
					w.C[v.Name][f][p.Name]=w.C[v.Name][f][p.Name]or{}
					w.C[v.Name][f][p.Name].Parameters,w.C[v.Name][f][p.Name].ReturnType,w.C[v.Name][f][p.Name].Security,w.C[v.Name][f][p.Name].Tags,w.C[v.Name][f][p.Name].ThreadSafety
					,w.C[v.Name][f][p.Name].ValueType,w.C[v.Name][f][p.Name].Category,w.C[v.Name][f][p.Name].Serialization=p.Parameters,p.ReturnType,p.Security,Tags,p.ThreadSafety,p.ValueType,p.Category
					,p.Serialization
				end
			end
			local Tags
			if v.Tags then
				for _,t in ipairs(v.Tags)do
					Tags=Tags or{}
					Tags[t]=true
				end
			end
			w.C[v.Name].MemoryCategory,w.C[v.Name].Superclass,w.C[v.Name].Tags=v.MemoryCategory,v.Superclass,Tags
		end
	end
	for _,v in pairs(API.Enums)do
		if not v.Tags then --+SkippedEnum(Deprecated)
			w.E[v.Name]=w.E[v.Name]or{}
			for _,vv in pairs(v.Items)do
				if not vv.Tags then --+SkippedItem(Deprecated/Hidden)
					w.E[v.Name][vv.Name]=vv.Value
					if v.LegacyNames then
						for _,vvv in pairs(v.LegacyNames)do
							w.E[v.Name][vvv.Name]=vv.Value
						end
					end
				end
			end
		end
	end
	table.clear(API)
end
do--[[ Global_Functions ]]--
	G.getProps=function(is,ty)--|(workspace/'Workspace')
		local t=type(is)=='userdata'
		local c=t and is.ClassName or is
		if w.C[c]then
			local tb={}
			if not ty or ty=='Pr'then
				if t then
					tb.Parent,tb.Name=is.Parent,is.Name
				else
					tb.Parent,tb.Name=true,true
				end
			end
			ty=ty or'Pr'
			if w.C[c][ty or'Pr']then
				for i in pairs(w.C[c][ty])do --Index=n
					ycall(function()
						local p=is[i]
						if t then
							tb[i]=p
						else
							tb[i]=true
						end
					end)
				end
			end
			for _,v in pairs(y)do
				if w.C[c][v]then
					if w.C[v][ty]then
						for i in pairs(w.C[v][ty])do
							ycall(function()
								local p=is[i]
								if t then
									tb[i]=p
								else
									tb[i]=true
								end
							end)
						end
					end
				end
			end
			return tb
		end
	end
	G.getEnums=function()--|()
		return w.E
	end
	G.getEnumItems=function(E)--|(Enum.KeyCode)
		return w.E[type(E)=='userdata'and E.Name or E]
	end
	G.getClassTable=function(is)--|(workspace/'Workspace')
		if type(is)=='userdata'and w.C[is.ClassName]then
			return w.C[is.ClassName]
		elseif w.C[is]then
			return w.C[is]
		end
	end
	G.getClasses=function()--|()
		return w.C
	end
	game:FindService'TestService':Message'API_Loaded!'--|print(game.HttpService:JSONEncode(getProps'Part'))
end
